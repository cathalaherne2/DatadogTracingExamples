import { SpanProcessor, SpanExporter, ReadableSpan } from '@opentelemetry/tracing';
import { Logger } from '@opentelemetry/api';
import { DatadogBufferConfig } from './types';
/**
 * An implementation of the {@link SpanProcessor} that converts the {@link Span}
 * to {@link ReadableSpan} and passes it to the configured exporter.
 *
 * Only spans that are sampled are converted.
 */
export declare class DatadogSpanProcessor implements SpanProcessor {
    private readonly _exporter;
    private readonly _bufferTimeout;
    private readonly _maxQueueSize;
    private readonly _maxTraceSize;
    private _isShutdown;
    private _shuttingDownPromise;
    private _timer;
    private _traces;
    private _tracesSpansStarted;
    private _tracesSpansFinished;
    private _checkTracesQueue;
    readonly logger: Logger;
    constructor(_exporter: SpanExporter, config?: DatadogBufferConfig);
    forceFlush(): Promise<void>;
    shutdown(): Promise<void>;
    onStart(span: ReadableSpan): void;
    onEnd(span: ReadableSpan): void;
    getTraceContext(span: ReadableSpan): (string | undefined)[];
    /** Send the span data list to exporter */
    private _flush;
    private _maybeStartTimer;
    private _clearTimer;
    private _allSpansCount;
    private _isExportable;
    private _fetchUnfinishedTrace;
}
//# sourceMappingURL=datadogSpanProcessor.d.ts.map