"use strict";
/*
 * Unless explicitly stated otherwise all files in this repository are licensed
 * under the Apache 2.0 license (see LICENSE).
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020 Datadog, Inc.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DATADOG_NEVER_SAMPLER = exports.DATADOG_ALWAYS_SAMPLER = exports.DatadogProbabilitySampler = void 0;
const api_1 = require("@opentelemetry/api");
/** Sampler that samples a given fraction of traces but records all traces. */
class DatadogProbabilitySampler {
    constructor(_probability = 0) {
        this._probability = _probability;
        this._probability = this._normalize(_probability);
    }
    shouldSample(context) {
        return {
            decision: Math.random() < this._probability
                ? api_1.SamplingDecision.RECORD_AND_SAMPLED
                : api_1.SamplingDecision.RECORD,
        };
    }
    toString() {
        // TODO: Consider to use `AlwaysSampleSampler` and `NeverSampleSampler`
        // based on the specs.
        return `DatadogProbabilitySampler{${this._probability}}`;
    }
    _normalize(probability) {
        if (typeof probability !== 'number' || isNaN(probability))
            return 0;
        return probability >= 1 ? 1 : probability <= 0 ? 0 : probability;
    }
}
exports.DatadogProbabilitySampler = DatadogProbabilitySampler;
exports.DATADOG_ALWAYS_SAMPLER = new DatadogProbabilitySampler(1);
exports.DATADOG_NEVER_SAMPLER = new DatadogProbabilitySampler(0);
//# sourceMappingURL=datadogProbabilitySampler.js.map